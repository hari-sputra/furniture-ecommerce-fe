// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "common/base_response.proto" (package "common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message common.ValidationError
 */
export interface ValidationError {
    /**
     * @generated from protobuf field: string field = 1;
     */
    field: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message common.BaseResponse
 */
export interface BaseResponse {
    /**
     * @generated from protobuf field: int32 status_code = 1;
     */
    statusCode: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: bool is_error = 3;
     */
    isError: boolean;
    /**
     * @generated from protobuf field: repeated common.ValidationError validation_errors = 4;
     */
    validationErrors: ValidationError[];
}
/**
 * @generated from protobuf message common.UserResponse
 */
export interface UserResponse {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string full_name = 2;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string role_code = 4;
     */
    roleCode: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp member_since = 5;
     */
    memberSince?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class ValidationError$Type extends MessageType<ValidationError> {
    constructor() {
        super("common.ValidationError", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidationError>): ValidationError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ValidationError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidationError): ValidationError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidationError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.ValidationError
 */
export const ValidationError = new ValidationError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BaseResponse$Type extends MessageType<BaseResponse> {
    constructor() {
        super("common.BaseResponse", [
            { no: 1, name: "status_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_error", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "validation_errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidationError }
        ]);
    }
    create(value?: PartialMessage<BaseResponse>): BaseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statusCode = 0;
        message.message = "";
        message.isError = false;
        message.validationErrors = [];
        if (value !== undefined)
            reflectionMergePartial<BaseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseResponse): BaseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status_code */ 1:
                    message.statusCode = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* bool is_error */ 3:
                    message.isError = reader.bool();
                    break;
                case /* repeated common.ValidationError validation_errors */ 4:
                    message.validationErrors.push(ValidationError.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BaseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status_code = 1; */
        if (message.statusCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.statusCode);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* bool is_error = 3; */
        if (message.isError !== false)
            writer.tag(3, WireType.Varint).bool(message.isError);
        /* repeated common.ValidationError validation_errors = 4; */
        for (let i = 0; i < message.validationErrors.length; i++)
            ValidationError.internalBinaryWrite(message.validationErrors[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.BaseResponse
 */
export const BaseResponse = new BaseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("common.UserResponse", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "role_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "member_since", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.fullName = "";
        message.email = "";
        message.roleCode = "";
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string full_name */ 2:
                    message.fullName = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string role_code */ 4:
                    message.roleCode = reader.string();
                    break;
                case /* google.protobuf.Timestamp member_since */ 5:
                    message.memberSince = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.memberSince);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string full_name = 2; */
        if (message.fullName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fullName);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string role_code = 4; */
        if (message.roleCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.roleCode);
        /* google.protobuf.Timestamp member_since = 5; */
        if (message.memberSince)
            Timestamp.internalBinaryWrite(message.memberSince, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.UserResponse
 */
export const UserResponse = new UserResponse$Type();
